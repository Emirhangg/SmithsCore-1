buildscript{
	repositories { 
		jcenter()
		maven {
			name = "forge" 
			url = "http://files.minecraftforge.net/maven"
		}
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
 	} 
	dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
	}
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.0.7"
    id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "1.34"
}

repositories {
    mavenLocal()
    maven {
        name 'ForgeFS'
        url 'http://files.minecraftforge.net/maven'
    }
    maven {
        name 'DVS1 Maven FS'
        url 'http://dvs1.progwml6.com/files/maven'
    }
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'

//Buildscript: SmithsCore
// Load the properties of this project.
ext.configFile = file "build.properties"

//Reference the properties inside the project:
configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

//Initializing the mod environment
version = config.minecraft_version.toString() + "-" + config.mod_version.toString() + "-" + System.getenv().BUILDID.toString()
def apiversion = config.minecraft_version.toString() + "-" + config.api_version.toString() + "-" + System.getenv().BUILDID.toString()

def release = System.getenv().RELEASETYPE

if(release != "release")
{
    version = version + "-SNAPSHOT"
    apiversion = apiversion + "-SNAPSHOT"
}

group = "com.smithsmodding.smithscore"
archivesBaseName = "smithscore"

minecraft {
    coreMod="com.smithsmodding.core.SmithsCoreFMLPlugin"
    version = config.minecraft_version+ "-" + config.forge_version
    runDir = "run"

    mappings = "snapshot_20161220"

    useDepAts = true

    //Replacing stuff inside the code:
    replace "@VERSION@", project.version
    replace "@MCVERSION@", config.minecraft_version
    replace "@APIVERSION@", apiversion
}

dependencies {
	//Mod dependencies
    deobfCompile "mezz.jei:jei_" + config.minecraft_version + ":" + config.jei_version

    //Test dependencies
    testCompile 'junit:junit:4.11'
    testCompile "org.mockito:mockito-core:1.+"
    testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '1.6.5'
    testCompile group: 'org.powermock', name: 'powermock-api-mockito', version: '1.6.5'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
}

sourceSets {
    main {
        java { 
            srcDir 'src/main'
        }
        resources {
            srcDir 'src/resources'
        }
    }
    test {
        java {
            srcDir 'src/test'
        }
    }
}

//This will process all the resources used during build, and needed for running the project
processResources
        {
            //Replaces stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                // replace version and mcversion
                expand 'version':project.version, 'mcversion':project.minecraft.version
            }

            //Copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
            exclude '**/Thumbs.db'
        }

jar {
    manifest {
        attributes 'FMLAT': 'SmithsCore_at.cfg'
    }
}

task devJar(type: Jar, dependsOn: 'classes') {
    from(sourceSets.main.output) {
        include '**'
    }

    extension = 'jar'
    classifier "dev"
}

task javadocJar(type: Jar, dependsOn: 'javadoc') {
    from "build/docs/javadoc"
    classifier "javadoc"
}

artifacts {
    archives devJar
    archives javadocJar
}

curseforge {
    if (System.getenv().CURSEAPIKEY != null && release != null)
    {
        apiKey = System.getenv().CURSEAPIKEY

        project {
            id = '246525'

            changelog = file("build/changelog.md")
            changelogType = "markdown"

            releaseType = release

            addArtifact devJar
            addArtifact javadocJar
        }
    }
    else
    {
        logger.lifecycle("Cannot run the CurseUpload sequence. No API-Key or release type has been provided.")
    }
}

task("createChangelog") {
    group = 'upload'

    doLast {
        def teamCityURL = "http://teamcity.minecolonies.com/"
        def file = new FileOutputStream("build/changelog.md")
        def out = new BufferedOutputStream(file)

        println("Retrieving changes from: " + teamCityURL + "guestAuth/app/rest/changes?locator=build:(id:" + teamcity["teamcity.build.counter"] + ")")
        def changesXML = new XmlSlurper().parse(teamCityURL + "guestAuth/app/rest/changes?locator=build:(id:" + teamcity["teamcity.build.counter"] + ")")

        def changes = changesXML.change
        println("createChangelog: Identified " + changes.size() + " changes to be written into the changelog.")

        out << "# SmithsCore Changelog \n"
        out << "## Version: _" + version + "_ \n"

        if (changes.size() > 0) {
            for (int i = 0; i < changes.size(); i++) {
                def changeDetailsURL = teamCityURL + "guestAuth/app/rest/changes/id:" + changes[i].@id.text()
                def changeDetailsXml = new XmlSlurper().parse(changeDetailsURL)
                def changeComment = changeDetailsXml.comment.text().trim().split("\n")[0]

                out << "* " + changeComment + "\n"
            }
        } else {
            out << "No Changes detected!"
        }

        out.close()
    }
}

