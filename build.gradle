buildscript{
	repositories { 
		jcenter()
		maven {
			name = "forge" 
			url = "http://files.minecraftforge.net/maven"
		}
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
 	} 
	dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
	}
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.0.7"
    id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "1.34"
}

repositories {
    mavenLocal()
    maven {
        name 'ForgeFS'
        url 'http://files.minecraftforge.net/maven'
    }
    maven {
        name 'DVS1 Maven FS'
        url 'http://dvs1.progwml6.com/files/maven'
    }
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'

sourceCompatibility = 1.8
targetCompatibility = 1.8

//Buildscript: SmithsCore
// Load the properties of this project.
ext.configFile = file "build.properties"

//Reference the properties inside the project:
configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

//Date formatting helper function
def getDate() {
    def date = new Date()
    def formattedDate = date.format('dd-MM-yyyy : hh:mm:ss')
    return formattedDate
}

def build_mode = config.build_mode

//These configurations are needed for uploading to a MavenRepo:
configurations {
    deployerJars
}

//Initializing the mod environment
version = config.minecraft_version.toString() + "-" + config.mod_version.toString() + "-" + System.getenv().TRAVIS_BUILD_NUMBER.toString()
def apiversion = config.minecraft_version.toString() + "-" + config.api_version.toString() + "-" + System.getenv().TRAVIS_BUILD_NUMBER.toString()

def release = System.getenv().RELEASETYPE

if(release != "release")
{
    version = version + "-SNAPSHOT"
    apiversion = apiversion + "-SNAPSHOT"
}

group = "com.smithsmodding.smithscore"
archivesBaseName = "smithscore"

minecraft {
    version = config.minecraft_version+ "-" + config.forge_version
    runDir = "run"

    mappings = "snapshot_20161220"

    useDepAts = true

    //Replacing stuff inside the code:
    replace "@VERSION@", project.version
    replace "@MCVERSION@", config.minecraft_version
    replace "@APIVERSION@", apiversion
}

dependencies {
	//Mod dependencies
    deobfCompile "mezz.jei:jei_" + config.minecraft_version + ":" + config.jei_version

    //Maven uploader
    deployerJars 'org.apache.maven.wagon:wagon-ftp:2.8'
}

sourceSets {
    main {
        java { 
            srcDir 'src/main'
        }
        resources {
            srcDir 'src/resources'
        }
    }
    test {
        java {
            srcDir 'src/test'
        }
    }
}

//This will process all the resources used during build, and needed for running the project
processResources
        {
            //Replaces stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                // replace version and mcversion
                expand 'version':project.version, 'mcversion':project.minecraft.version
            }

            //Copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
            exclude '**/Thumbs.db'
        }

jar {
    manifest {
        attributes 'FMLAT': 'SmithsCore_at.cfg'
    }
}

task devJar(type: Jar, dependsOn: 'classes') {
    from(sourceSets.main.output) {
        include '**'
    }

    extension = 'jar'
    classifier "dev"
}

task javadocJar(type: Jar, dependsOn: 'javadoc') {
    from "build/docs/javadoc"
    classifier "javadoc"
}

artifacts {
    archives devJar
    archives javadocJar
}

curseforge {
    if (System.getenv().CURSEAPIKEY != null || System.getenv().CURSERELEASETYPE != null)
    {
        apiKey = System.getenv().CURSEAPIKEY

        project {
            id = '246525'

            releaseType = release

            addArtifact devJar
            addArtifact javadocJar
        }
    }
    else
    {
        logger.lifecycle("Cannot run the CurseUpload sequence. No API-Key or release type has been provided.")
    }
}

//Function to upload completed project to the maven repo.
uploadArchives {
    repositories.mavenDeployer {
        configuration = configurations.deployerJars
        if (release != "release") {
            snapshotRepository(url: "ftp://mavenrepo.smithscore.orionminecraft.com") {
                authentication(userName: "mavenrepo.smithscore.orionminecraft.com|" + System.getenv().FTPUSERNAME.toString(), password: System.getenv().FTPPASSWORD.toString())
            }
        } else {
            repository(url: "ftp://mavenrepo.smithscore.orionminecraft.com") {
                authentication(userName: "mavenrepo.smithscore.orionminecraft.com|" + System.getenv().FTPUSERNAME.toString(), password: System.getenv().FTPPASSWORD.toString())
            }
        }

        pom {
            groupId = project.group
            version = project.version
            artifactId = project.archivesBaseName
        }

        pom.project {
            name project.archivesBaseName
            packaging 'jar'
            description 'smithscore'
            url 'https://github.com/smithsmodding/smithscore'

            scm {
                url 'https://github.com/smithsmodding/smithscore'
                connection 'scm:git:git://github.com/smithsmodding/smithscore.git'
                developerConnection 'scm:git:git@github.com/smithsmodding/smithscore.git'
            }

            issueManagement {
                system 'github'
                url 'https://github.com/smithsmodding/smithscore/issues'
            }

            developers {
                developer {
                    id 'OrionDevelopment'
                    name 'Orion'
                    roles {
                        role 'developer'
                    }
                }
            }
        }

    }
}

